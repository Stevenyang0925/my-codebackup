# 桌面程序功能需求文档：多格式文本转Markdown工具（Python版）

## 一、编程语言选择
**语言**：Python
**理由**：
- Python拥有丰富的库支持，便于快速开发。
- 可通过PyInstaller将Python程序打包为Windows可执行文件。
- 开发效率高，适合个人或小团队项目。

## 二、开发环境搭建与初始化
- **开发工具选择**：
  - 推荐使用Cursor或Trae等现代化Python开发工具。
- **虚拟环境创建**：
  - 开发启动时，使用开发工具自动创建项目专属的虚拟环境，隔离项目依赖，避免环境冲突。
  - 通过`python -m venv venv`命令创建虚拟环境，并激活以供后续开发使用。
- **README.md文件生成**：
  - 利用开发工具自动生成README.md文件，将功能需求文档的关键信息转化为程序可读的格式，方便开发过程中的文档查阅与项目管理。
- **开发步骤说明文件生成**：
  - 自动生成一个“开发步骤说明.md”文件，详细列出项目的开发流程、各阶段任务及预期成果，为开发进度的追踪提供便利。
- **依赖清单创建与安装**：
  - 开发工具应根据项目需求自动生成开发依赖清单，涵盖所有必要的Python库及版本要求。
  - 使用`pip install -r requirements.txt`命令安装依赖，确保开发环境的完整性和一致性，预防后期因依赖缺失或版本不匹配导致的错误。

## 三、程序的整体架构
- **前端**：
  - 基于Tkinter或PyQt开发图形用户界面（GUI）。
  - 提供文件上传、转换按钮和输出路径选择功能。
- **后端**：
  - 实现文件解析、格式转换和Markdown生成功能。
- **核心功能**：
  - 支持Word、Excel、TXT、PDF和图片五种格式的文本提取，并将其转换为Markdown格式。
  - 增加Markdown文件的打开功能。
- **输出**：
  - 生成的Markdown文件保存到用户指定路径，以`.md`后缀名保存。

## 四、程序的模块构成
- **GUI模块**（前端）：
  - 文件选择框：支持用户上传文件。
  - 转换按钮：触发转换逻辑。
  - 输出路径选择：用户指定保存位置。
  - Markdown文件打开功能：能够打开并显示已有的Markdown文件。
  - **高保真原型设计**：使用工具（如Figma或Adobe XD）设计界面原型，确保交互和视觉效果符合预期。
- **文件解析模块**：
  - Word解析：使用`python-docx`库提取文本。
  - Excel解析：使用`pandas`或`openpyxl`库提取表格数据。
  - TXT解析：直接读取文本文件。
  - PDF解析：使用`PyPDF2`或`pdfminer.six`库提取文本。
  - 图片解析：使用`Pytesseract`（OCR）提取图片中的文字。
- **Markdown生成模块**：
  - 将提取的文本按Markdown语法格式化，例如标题、列表、表格等。
- **文件输出模块**：
  - 将生成的Markdown文件保存到指定路径，以`.md`后缀名保存。
- **日志与异常处理模块**：
  - 记录程序运行日志，捕获并处理异常，提升用户体验。
- **Markdown文件打开功能**：
  - 在GUI中增加“打开Markdown文件”按钮，用户点击后可以选择已有的`.md`文件进行打开。
  - 程序读取并解析选中的Markdown文件内容，在界面上显示或进行相应的处理。
  - 对打开的文件可以进行编辑，保存等操作。
- **Markdown文件保存功能**：
  - 转换生成的Markdown内容默认以`.md`后缀名保存，用户可以在保存对话框中自定义文件名和保存路径。
  - 确保保存的Markdown文件格式正确，能够被常见的Markdown编辑器和查看器正确识别和打开。

## 五、模块开发顺序
- **第一阶段**：高保真原型设计
  1. 使用Figma或Adobe XD设计程序的用户界面。
  2. 确定界面布局、交互流程和视觉效果。
  3. 根据原型设计开发GUI模块，确保实现与设计一致。
- **第二阶段**：开发核心功能模块
  1. **文件解析模块**：
     - 依次开发Word、Excel、TXT、PDF和图片的解析功能，确保每种格式的文本提取逻辑正确。
  2. **Markdown生成模块**：
     - 设计Markdown格式化逻辑，确保生成的Markdown文件结构清晰。
- **第三阶段**：开发日志与异常处理模块
  1. 添加日志功能，记录程序运行状态。
  2. 捕获并处理可能的异常，例如文件格式错误、路径无效等。
- **第四阶段**：测试与优化
  1. 对每个模块进行单元测试，确保功能正确。
  2. 进行整体测试，优化性能和用户体验。
- **第五阶段**：打包为Windows可安装程序
  1. 使用PyInstaller将程序打包为`.exe`文件。
  2. 使用Inno Setup创建安装程序包。

## 六、高保真原型设计
- **目标**：
  - 在开发前明确界面设计和交互流程，减少开发中的返工。
- **工具选择**：
  - **Figma**：免费、协作性强，适合设计高保真原型。
  - **Adobe XD**：功能强大，适合复杂界面设计。
- **设计步骤**：
  1. **需求分析**：
     - 确定用户画像、使用场景和核心功能。
  2. **线框图设计**：
     - 绘制界面布局，明确元素位置和功能。
  3. **高保真设计**：
     - 添加颜色、字体、图标等视觉元素，提升用户体验。
  4. **交互设计**：
     - 设计按钮点击、文件上传等交互行为，模拟真实操作。
  5. **用户测试**：
     - 邀请目标用户测试原型，收集反馈并优化设计。
- **设计输出**：
  - 可交互的高保真原型文件（如Figma链接或Adobe XD导出文件）。
  - 设计文档，说明界面布局、交互流程和设计规范。

## 七、程序打包为Windows可安装程序包
- **工具选择**：
  - 使用`PyInstaller`将Python程序打包为单个`.exe`文件。
    - 命令示例：`pyinstaller --onefile --windowed your_script.py`
  - 使用`Inno Setup`将`.exe`文件打包为Windows可安装程序包（MSI文件），支持安装向导、创建桌面快捷方式等功能。
- **打包步骤**：
  1. 使用PyInstaller生成`.exe`文件。
  2. 使用Inno Setup创建安装脚本，指定程序名称、版本、图标、安装路径等信息。
  3. 编译安装脚本，生成MSI文件。
- **依赖处理**：
  - 确保Python程序的所有依赖库被打包进安装包。
  - 对于OCR功能，需要确保Tesseract的依赖文件（如语言包）被正确包含。

## 八、开发环境和依赖清单
- **开发环境**：
  - 操作系统：Windows 10/11
  - Python版本：3.8及以上
  - IDE：PyCharm、VS Code等
- **依赖清单**：
  - `python-docx`：处理Word文件。
  - `pandas`/`openpyxl`：处理Excel文件。
  - `PyPDF2`/`pdfminer.six`：处理PDF文件。
  - `Pytesseract`：处理图片中的文字。
  - `markdown`：生成Markdown文件。
  - `tkinter`或`PyQt`：开发图形用户界面。
  - `logging`：日志记录。
  - `PyInstaller`：程序打包。
  - `Inno Setup`：创建安装包。

## 九、模块间接口定义
- **GUI模块与文件解析模块**：
  - GUI模块通过调用文件解析模块的函数，传递用户选择的文件路径作为参数，获取解析后的文本数据。
  - 定义统一的数据结构，如字典或对象，用于传递解析结果，包括文本内容、格式信息等。
- **文件解析模块与Markdown生成模块**：
  - 文件解析模块将解析得到的文本数据按照统一格式传递给Markdown生成模块。
  - Markdown生成模块根据接收到的数据，按照Markdown语法进行格式化，生成对应的Markdown内容。
- **Markdown生成模块与文件输出模块**：
  - Markdown生成模块将生成的Markdown内容以字符串形式传递给文件输出模块。
  - 文件输出模块负责将字符串保存到用户指定的路径，完成文件的最终输出。

## 十、性能优化策略
- **文件解析优化**：
  - 对于大型文件，采用分块读取和解析的方式，避免一次性加载整个文件导致内存占用过高。
  - 在解析过程中，利用多线程或异步处理提高解析效率，特别是在处理多个文件或复杂格式时。
- **OCR性能提升**：
  - 对于图片文字识别，优化图片预处理步骤，如调整图片大小、增强对比度等，提高识别速度和准确性。
  - 考虑使用GPU加速的OCR库，如果条件允许，可以显著缩短识别时间。
- **响应式界面设计**：
  - 在文件转换过程中，确保GUI界面保持响应，避免出现卡顿或无响应的情况。可以通过将耗时操作放到后台线程中执行，而保持主线程用于处理界面交互。

## 十一、版本管理
- **使用GitHub进行版本管理**：
  - 创建GitHub仓库，将项目代码上传至仓库，方便代码的备份和管理。
  - 在开发过程中，定期提交代码更改，添加有意义的提交信息，便于追踪开发进度和回溯历史版本。
  - 利用GitHub的分支功能，进行功能开发和bug修复，保持主分支的稳定性。
  - 通过GitHub的Pull Request机制，进行代码审查和合并，确保代码质量。

## 十二、新增功能：Markdown文件的打开与保存
- **Markdown文件打开功能**：
  - 在GUI中增加“打开Markdown文件”按钮，用户点击后可以选择已有的`.md`文件进行打开。
  - 程序读取并解析选中的Markdown文件内容，在界面上显示或进行相应的处理。
- **Markdown文件保存功能**：
  - 转换生成的Markdown内容默认以`.md`后缀名保存，用户可以在保存对话框中自定义文件名和保存路径。
  - 确保保存的Markdown文件格式正确，能够被常见的Markdown编辑器和查看器正确识别和打开。

通过以上规划，您可以在学习高保真原型设计的同时，高效开发一款功能完善、易于使用的桌面程序，满足用户将多种格式文本转换为Markdown的需求，并通过GitHub进行有效的版本管理，方便后续的维护和功能扩展。